<section class = "banner" id = "banner-accountSetup">
    <div class = "container" id = "container-accountSetup">
		<%= form_for(@user, url: submit_wizard_profiles_path) do |f| %>
		
			<div class = "module-container align-center">
				<div class = "module per100 accountSetupWalkthrough self-align-middle text-center padding-large" id = "module-setup-0">
					<h2>Thanks for signing up!</h2>
					 <h3>We'd just need a little more info from you.</h3>
					<br />
					<p class = "large padding-bottom-small">We'll walk you through it step-by-step</p>
					<br / >
					<div id = "nextButton0" class = "margin-top per20 button nextButton">Let's Begin!</div>
				</div>
				

				
				<div class = "module per100 accountSetupWalkthrough self-align-middle text-center padding-large" id = "module-setup-1">
					<div class ="module-container text-center align-center">
						<p class = "large padding-bottom-small">What is your full name?</p>
						<br / >
					
						<div class = "module per50 margin-bottom module-input input-money">
							<span class = "floating-label">Full Name</span>
							<%= f.text_field :name, :class=> "medium per100 input-floating-label", :id => "input-fullName"%>
						</div>
					</div>
					<div id = "nextButton1" class = "margin-top per20 button nextButton">Next</div>
					<div id = "step1Text" class = "margin-top per20">Step 1 of 4</div>	

				</div>
				
				
				<div class = "module per100 accountSetupWalkthrough self-align-middle text-center padding-large" id = "module-setup-2">
					<div class ="module-container text-center align-center">
						<p class = "large padding-bottom-small">Where are you based?</p>
						<br / >
					
						<div class = "module per50 margin-bottom module-input input-money">
							<span class = "floating-label">Location</span>
							<input class = "medium per100 input-floating-label post-input padding-small" type = "text" id = "input_loction">
							<!-- ADD HIDDEN INPUTES FOR LAT AND LONG BASED ON API RESPONCE-->
							
							<%= f.text_field :lat, :class=> "medium per100 input-floating-label hidden", :id => "input-hiddenLat" %>
							<%= f.text_field :lng, :class=> "medium per100 input-floating-label hidden", :id => "input-hiddenLng"%>
							
							
						</div>
					</div>
					<div id = "nextButton1" class = "margin-top per20 button nextButton">Next</div>
					<div id = "step1Text" class = "margin-top per20">Step 2 of 4</div>	

				</div>
				<div class = "module per100 accountSetupWalkthrough self-align-middle text-center padding-large" id = "module-setup-3">
					<div class ="module-container text-center align-center">
						<br>
						<p class = "large padding-bottom-small">What is your phone number?</p>
						<div class = "module-container align-center">
							<div class = "module per50 margin-bottom align-center module-input input-money">
		                        <span class = "floating-label">xxx-xxx-xxxx</span>
								<%= f.telephone_field :phone, :class=> "medium per100 input-floating-label" %>
							</div>
							<br />
						</div>
					</div>
					<div id = "nextButton2" class = "margin-top per20 button nextButton">Next</div>
					<div id = "step2Text" class = "margin-top per20">Step 3 of 4</div>
				</div>
			
				<div class = "module per100 accountSetupWalkthrough self-align-middle text-center padding-large" id = "module-setup-4">
					<div class ="module-container text-center align-center">
						<p class = "large">Would you like to upload a photo?</p>
						<br />
						(Just click next if you'd like to upload one later)
						<br />
						<input form = "form-accountSetup" type = "file" name = "photo" id = "input-photoFile" class = "margin-top per50">
						<br />
					</div>
	  			  <div class="actions text-right margin-top">
	  			    <%= f.submit "Finish!" , :class => "button medium", :id => "wizard-update-profile"%>
	  			  </div>
					
					<div id = "step4Text" class = "margin-top per20">Step 4 of 4</div>
				</div>
			</div>
		<% end %>
	</div>
</section>


<script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        input_loction: 'short_name',
       // route: 'long_name',
        //locality: 'long_name',
        //administrative_area_level_1: 'short_name',
        //country: 'long_name',
        //postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('input_loction')),
            {types: ['geocode']});
	        autocomplete.addListener('place_changed', function()     {
	          var place = autocomplete.getPlace()
	          console.log(place);
	          $.each(place.address_components, function(index, region) {
	          if(place.geometry.location) {
	            $('#input-hiddenLat').val(place.geometry.location.lat())
	            $('#input-hiddenLng').val(place.geometry.location.lng())
	          }
		  })
	  })

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        //autocomplete.addListener('place_changed', fillInAddress);
      }
    

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;

          }
        }
		console.log("placing Objects")
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
	  //pretty sure I can delete this function
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
			  
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
			
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
	  
      //var autocomplete = new google.maps.places.Autocomplete(input, options);

      
	  
	  
	  
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC4qNZbqEihPxTd-Wew-k7ieoY1Jw-0Nf8&libraries=places&callback=initAutocomplete"
        async defer></script>