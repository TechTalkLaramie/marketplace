
<section class = "banner" id = "banner-accountSetup">
	<div class = "container" id = "container-accountSetup">
		<div class = "module per100">
			<h2 class = "margin-bottom">Edit <%= resource_name.to_s.humanize %> Information</h2>
        

			<%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put , multipart: true}) do |f| %>
			  <%= devise_error_messages! %>

              <div class = "module per100 margin-bottom" id = "button-change-password">
                  <p class = "bold">Change Password</p>
              </div>
            
              <div class = "change-password">

                  <div class = "module per100 margin-bottom module-input">
                  	<span class = "floating-label">Password  <% @minimum_password_length ? '(six character minimum)' : '' %></span>
                  	<%= f.password_field :password, autocomplete: "off" , :class=> "medium input-floating-label per100"%>
                  </div>

          		<div class = "module per100 margin-bottom module-input">
          			<span class = "floating-label">Password Confirmation</span>
          			<%= f.password_field :password_confirmation, autocomplete: "off", :class=> "medium input-floating-label per100" %>
        			</div>
            
              </div>

			<div class = "module per100 margin-bottom module-input">
				<span class = "floating-label">Full Name</span>
				<%= f.text_field :name, :class=> "medium input-floating-label per100" %>
			</div>


			<div class = "module per100 margin-bottom module-input">
				<span class = "floating-label">E-mail Address</span>
				<%= f.email_field :email, :class=> "medium input-floating-label per100" %>
			</div>

			<div class = "module per100 margin-bottom module-input">
				<div class = "module per100">Avatar</div>
				<%= f.file_field :avatar, :class=> "medium input-floating-label per100" %>
			</div>

			  <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
			    <div>Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
			  <% end %>




			<div class = "module per100 margin-bottom module-input input-money">
				<span class = "floating-label">Location</span>
				<input class = "medium per100 input-floating-label post-input padding-small" placeholder = "" type = "text" id = "input_editProfileloction">
				<!-- ADD HIDDEN INPUTES FOR LAT AND LONG BASED ON API RESPONCE-->

	  			<div class = "module per100 margin-bottom module-input">
	  				<span class = "floating-label">Latitude</span>
	  				<%= f.text_field :lat, :class=> "medium input-floating-label per100 hidden", :id=>"editProfileHiddenLat" %>
				</div>


	  			<div class = "module per100 margin-bottom module-input">
	  				<span class = "floating-label">Longitude</span>
	  				<%= f.text_field :lng, :class=> "medium input-floating-label per100 hidden", :id=>"editProfileHiddenLng"  %>
				</div>


			</div>








  			<div class = "module per100 margin-bottom module-input">
  				<span class = "floating-label">Phone Number</span>
  				<%= f.telephone_field :phone, :class=> "medium input-floating-label per100" %>
			</div>

  			<div class = "module per100 margin-bottom module-input">
  				<span class = "floating-label">About Me</span>
  				<%= f.text_area :about_me, :id => "about-me-text", :class=> "medium input-floating-label per100" %>
			</div>


			  <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
			    <div>Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
			  <% end %>



                


			  <div class="actions text-right margin-top per100">
			    <%= f.submit "Update" , :class => "button medium per100 primary-color", :id => "button-update-edit-profile"%>
			  </div>
			<% end %>
		</div>
        
		<div class = "module per100 margin-top text-center" id = "module-cancelAccount">
			<p> <%= button_to "Unhappy? Cancel Account", registration_path(resource_name), data: { confirm: "Are you sure?" }, method: :delete, :class => "button medium per100"%></p>
		</div>
	</div>
</section>


<script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        input_loction: 'short_name',
       // route: 'long_name',
        //locality: 'long_name',
        //administrative_area_level_1: 'short_name',
        //country: 'long_name',
        //postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('input_editProfileloction')),
            {types: ['geocode']});
	        autocomplete.addListener('place_changed', function()     {
	          var place = autocomplete.getPlace()
	          console.log(place);
	          $.each(place.address_components, function(index, region) {
	          if(place.geometry.location) {
	            $('#editProfileHiddenLat').val(place.geometry.location.lat())
	            $('#editProfileHiddenLng').val(place.geometry.location.lng())
	          }
		  })
	  })

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        //autocomplete.addListener('place_changed', fillInAddress);
      }


      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;

          }
        }
		console.log("placing Objects")
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
	  //pretty sure I can delete this function
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {

            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }

      //var autocomplete = new google.maps.places.Autocomplete(input, options);





    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC4qNZbqEihPxTd-Wew-k7ieoY1Jw-0Nf8&libraries=places&callback=initAutocomplete"
        async defer></script>

